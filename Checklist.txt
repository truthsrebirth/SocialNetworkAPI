NoSQL Challenge: Social Network API

1. Your challenge is to build an API for a social network web application where users can share their thoughts, react to friends’ thoughts, and create a friend list.

***DONE
2. You’ll use Express.js for routing, a MongoDB database, and the Mongoose ODM.

    A.  "npm i express" to install express
    B.  "npm i mongoose" to install mongoose

***DONE
3. In addition to using the Express.js(link) and Mongoose(link) packages, you may also optionally use a JavaScript date library of your choice or the native JavaScript Date object to format timestamps.

    To install Moment.js , I entered "npm i moment" into the terminal

4. Because this application won’t be deployed, you’ll also need to create a walkthrough video that demonstrates its functionality and all of the following acceptance criteria being met. You’ll need to submit a link to the video and add it to the README of your project.

5. USER STORY:

    AS A social media startup
    I WANT an API for my social network that uses a NoSQL database
    SO THAT my website can handle large amounts of unstructured data

6. ACCEPTANCE CRITERIA:

    GIVEN a social network API
    WHEN I enter the command to invoke the application
    THEN my server is started and the Mongoose models are synced to the MongoDB database
    WHEN I open API GET routes in Insomnia for users and thoughts
    THEN the data for each of these routes is displayed in a formatted JSON
    WHEN I test API POST, PUT, and DELETE routes in Insomnia
    THEN I am able to successfully create, update, and delete users and thoughts in my database
    WHEN I test API POST and DELETE routes in Insomnia
    THEN I am able to successfully create and delete reactions to thoughts and add and remove friends to a user’s friend list

7. Follow the mock ups in BCS module 18

8. Use the following guidelines to set up your models and API routes:

    Models:

    #1 User:

        username:

            - string
            - unique
            - required
            - trimmed

        email:

            - string
            - required
            - unique
            - must match a valid email address (look into Mongoose's validation)

        thought:

            - Array of _id values referencing the "Thought" model

        friends:

            - Array of _id values referencing the "User" model (self-reference)

    #Schema-Settings 

        - Create a virtual called friendCouint that retrieves the length of the user's friends array field on query



    #2 Thought:

        thoughtText:

            - string
            - required
            - must be between 1 and 280 characters

        createdAt:

            - date
            - set default value to the current timestamp
            - use a getter method to format the timestamp on query

        username: (The user that created this thoguht)

            - string
            - required

        reactions: (These are like replies)

            - Array of nested documents created with the reactionSchema

        #Schema-Settings

            - Create a virtual called reactionCount that retrieves the length of the thought's reactions array field on query

    
    #3 Reaction: (SCHEMA ONLY)

        reactionId:

            - use mongoose's ObjectId data type
            - default value is set to a new ObjectId

        reactionBody:

            - string
            - required
            - 280 character maximum

        username:

            - string
            - required

        createdAt:

            - date
            - set default value to the current timestamp
            - use a getter method to format the timestamp on query 

        #Schema-Settings

            - This will not be a model, but rather will be used as the reaction field's subdocument schema in the "Thought" model

    

9. API ROUTES:

    /api/users

        - GET all users
        - GET a single user by its _id and populated thought and friend data
        - POST a new user

        // example 

            {
                "username": "lernantino",
                "email": "lernantino@gmail.com
            }

        - PUT to update a user by its _id
        - DELETE to remove user by its _id

        ***BONUS: Remove a user's associated thoughts when deleted

    
    /api/users/:userId/friends/:friendId

        - GET to get all thoughts
        - GET to get a single thought by its _id
        - POST to create a new thought (don't forget to push the created thought's _id to the associated user's thoughts array field)

        // example

            {
                "thoughtText": "Here's a cool thought...",
                "username": "lernantino",
                "userId": "5edff358a0fcb779aa7b118b"
            }

        - PUT to update a thought by its _id
        - DELETE to remove a thought by its _id


    /api/thoughts/:thoughtId/reactions

        - POST to create reaction stored in a single thought's reactions array field
        - DELETE to pull and remove a reaction by the reaction's reactionId value 



10. WALKTHROUGH VIDEO:

    A walkthrough video that demonstrates the functionality of the social media API must be submitted, and a link to the video should be included in your README file.

        - The walkthrough video must show all of the technical acceptance criteria being met.
        - The walkthrough video must demonstrate how to start the application’s server.
        - The walkthrough video must demonstrate GET routes for all users and all thoughts being tested in Insomnia.
        - The walkthrough video must demonstrate GET routes for a single user and a single thought being tested in Insomnia.
        - The walkthrough video must demonstrate POST, PUT, and DELETE routes for users and thoughts being tested in Insomnia.
        - Walkthrough video must demonstrate POST and DELETE routes for a user’s friend list being tested in Insomnia.
        - Walkthrough video must demonstrate POST and DELETE routes for reactions to thoughts being tested in Insomnia.


11. TECHNICAL ACCEPTANCE CRITERIA:

        - Uses the Monggose package (link) to connect to a MongoDB database
        - Includes User and Thought models outlined in the Challenge instructions.
        - Includes schema settings for User and Thought models as outlined in the Challenge instructions.
        - Includes Reactions as the reaction field's subdocument schema in the Thought model.
        - Uses functionality to format queried timestamps properly.

12. SUBMITTING THE CHALLENGE:

    - A walkthrough video demonstrating the functionality of the application and all of the acceptance criteria being met.
    - The URL of the GitHub repository. Give the repository a unique name and include a README describing the project.


